{
  "name": "Lead Enrichment + Email Builder",
  "nodes": [
    {
      "parameters": {
        "zone": {
          "__rl": true,
          "value": "serp_api1",
          "mode": "list",
          "cachedResultName": "serp_api1"
        },
        "country": {
          "__rl": true,
          "mode": "list",
          "value": "us"
        },
        "url": "=https://www.google.com/search?q={{ $json.domain }}+owler+{{ $('Get row(s) in sheet').item.json.City }}&brd_json=1",
        "requestOptions": {}
      },
      "type": "@brightdata/n8n-nodes-brightdata.brightData",
      "typeVersion": 1,
      "position": [
        -440,
        1195
      ],
      "id": "9f13f299-165d-4a99-82c9-bc436d664fdc",
      "name": "Google search via Brightdata Official node",
      "credentials": {}
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "<Google Sheet ID here>",
          "mode": "list",
          "cachedResultName": "Lead Gen for Real Estate",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/<Google Sheet ID here>/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 954930494,
          "mode": "list",
          "cachedResultName": "Raw Serp Data",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/<Google Sheet ID here>/edit#gid=954930494"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Qualified /Disqualified"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -1100,
        1195
      ],
      "id": "916d12c4-65eb-4466-8498-25f53aab6f21",
      "name": "Get row(s) in sheet",
      "credentials": {}
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -880,
        1195
      ],
      "id": "bd0234c6-d6a8-42bd-ac94-17f604bd285b",
      "name": "Limit"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code (JavaScript, Node v2)\n// Input:  each item has `Website` field (string URL), e.g. {{ $json.Website }}\n// Output: { domain: \"abc.com\" }  (lowercased, without \"www.\")\n\nfunction toDomain(raw) {\n  if (!raw) return \"\";\n\n  // Clean stray whitespace/quotes/zero-width chars\n  let s = String(raw)\n    .replace(/[\\u200B-\\u200D\\uFEFF]/g, \"\")\n    .replace(/\\u00A0/g, \" \")\n    .replace(/^['\"`]+|['\"`]+$/g, \"\")\n    .trim();\n\n  if (!s) return \"\";\n\n  // If missing scheme, assume https\n  if (!/^[a-zA-Z][a-zA-Z0-9+.-]*:\\/\\//.test(s)) {\n    s = \"https://\" + s;\n  }\n\n  let hostname = \"\";\n  try {\n    hostname = new URL(s).hostname.toLowerCase();\n  } catch {\n    // Last resort: extract something that looks like a host\n    const m = s.match(/^[a-zA-Z][a-zA-Z0-9+.-]*:\\/\\/([^\\/?#\\s]+)/);\n    hostname = (m?.[1] || s).toLowerCase();\n  }\n\n  // Strip common prefixes like www.\n  hostname = hostname.replace(/^(www|m|home|app|beta|staging|dev|portal|blog|shop)\\./, \"\");\n\n  // If it's an IPv4 / localhost, just return as-is\n  if (/^\\d+\\.\\d+\\.\\d+\\.\\d+$/.test(hostname) || hostname === \"localhost\") {\n    return hostname;\n  }\n\n  // Heuristic for registrable domain:\n  // - If looks like *.co.uk / *.com.au / *.org.uk etc., keep last 3 labels\n  // - Else keep last 2 labels\n  const parts = hostname.split(\".\");\n  if (parts.length <= 2) {\n    return hostname; // already a bare domain like abc.com or cau.edu\n  }\n\n  const last = parts[parts.length - 1];       // TLD (e.g., com, net, uk)\n  const secondLast = parts[parts.length - 2]; // e.g., co, com, org (when ccTLD)\n  const ccLike = last.length === 2; // country-code TLD\n\n  // Common second-level markers under ccTLDs (expand as needed)\n  const slds = new Set([\"co\", \"com\", \"org\", \"net\", \"gov\", \"ac\", \"edu\"]);\n\n  if (ccLike && slds.has(secondLast)) {\n    // e.g., foo.bar.co.uk -> keep bar.co.uk (last 3)\n    return parts.slice(-3).join(\".\");\n  }\n\n  // Default: last 2 labels\n  return parts.slice(-2).join(\".\");\n}\n\nconst out = $input.all().map(item => {\n  const website = item.json?.Website ?? \"\";\n  const domain = toDomain(website);\n  return { json: { domain } };\n});\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -660,
        1195
      ],
      "id": "439f4a2f-22de-4c76-b04e-047035c7da75",
      "name": "Code"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Company Domain - {{ $('Code').item.json.domain }}\n\n\nGoogle Search Data - {{ JSON.stringify($json.organic.map(o => ({ title: o.title, url: o.link, snippet: o.description })), null, 2) }}\n\n",
        "options": {
          "systemMessage": "You are a company research assistant.  \nYour task is to select the **correct Owler company profile URL** from a list of Google Search results.  \n\n### Input:\n- `Company Domain`: The official company domain (e.g., primior.com).  \n- `Google Search Data`: A list of search results, each containing `title`, `url`, and `snippet`.  \n\n### Rules:\n1. Only return **Owler links** (`https://www.owler.com/company/...`).  \n2. Skip **all non-Owler results** (LinkedIn, Facebook, news, blogs, social media, etc.).  \n3. The Owler link must correspond to the **same company** as the provided `Company Domain`.  \n   - Match by company name similarity (title/snippet) or direct reference to the domain.  \n   - If multiple Owler links exist, prefer the one that best matches the company domain or official name.  \n4. If no valid Owler company link exists, return:  \n   ```json\n   { \"URL\": \"Not Found\" }\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -220,
        1200
      ],
      "id": "43d222c2-4cc1-4ddc-82da-d79106d069ba",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -160,
        1360
      ],
      "id": "97ce3040-e45a-4844-a63b-548b7f36f526",
      "name": "Google Gemini Chat Model",
      "credentials": {}
      }
    },
    {
      "parameters": {
        "jsCode": "const raw = $input.first().json.output;\n\n// Remove triple backticks and any 'json' hint\nconst cleaned = raw\n  .replace(/```json|```/g, '') // remove ```json or ```\n  .trim();\n\nlet parsed;\ntry {\n  parsed = JSON.parse(cleaned);\n} catch (e) {\n  throw new Error('Failed to parse JSON from text field: ' + e.message);\n}\n\nreturn [\n  {\n    json: {\n      URL: parsed.URL || 'Not Found'\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        140,
        1195
      ],
      "id": "331ea2c8-d34b-4808-9fc0-e7aa41db6e6b",
      "name": "Code1"
    },
    {
      "parameters": {
        "resource": "webScrapper",
        "operation": "triggerCollectionByUrl",
        "dataset_id": {
          "__rl": true,
          "value": "gd_l1vilaxi10wutoage7",
          "mode": "list",
          "cachedResultName": "Owler companies information"
        },
        "urls": "=[{\"url\":\"{{ $json.URL }}\"}] ",
        "requestOptions": {}
      },
      "type": "@brightdata/n8n-nodes-brightdata.brightData",
      "typeVersion": 1,
      "position": [
        560,
        980
      ],
      "id": "c1ad67bc-f2ad-4555-bb33-aafc3a1d9b4e",
      "name": "Initiate batch extraction from URL1",
      "credentials": {}
      }
    },
    {
      "parameters": {
        "resource": "webScrapper",
        "operation": "downloadSnapshot",
        "snapshot_id": "={{ $json.snapshot_id }}",
        "requestOptions": {}
      },
      "type": "@brightdata/n8n-nodes-brightdata.brightData",
      "typeVersion": 1,
      "position": [
        1880,
        980
      ],
      "id": "15fca78d-af75-4278-bfb0-5ff1e953a8ea",
      "name": "Download the snapshot content1",
      "credentials": {}
      }
    },
    {
      "parameters": {
        "options": {
          "reset": true
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        780,
        980
      ],
      "id": "da2f34d1-8c10-4ccc-85be-38e50f476b79",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "amount": 1,
        "unit": "minutes"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1000,
        900
      ],
      "id": "72956be5-595d-4a46-a30e-09518dd5a0fc",
      "name": "Wait1",
      "webhookId": "f674afed-0baf-41bf-a693-93319af062e8"
    },
    {
      "parameters": {
        "resource": "webScrapper",
        "operation": "monitorProgressSnapshot",
        "snapshot_id": "={{ $json.snapshot_id }}",
        "requestOptions": {}
      },
      "type": "@brightdata/n8n-nodes-brightdata.brightData",
      "typeVersion": 1,
      "position": [
        1220,
        900
      ],
      "id": "67522e2b-f05f-4a90-82a9-40ad501d66b1",
      "name": "Check the status of a batch extraction1",
      "credentials": {}
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e927ab46-25d3-481e-8cf0-6dafb0bd0446",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "ready",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "running",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "0949bac2-d8a4-4653-91bd-155b7aea353d"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1440,
        980
      ],
      "id": "b74dfc80-7985-4d36-b494-ff06ffe25302",
      "name": "Switch1"
    },
    {
      "parameters": {
        "amount": 90
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1660,
        980
      ],
      "id": "f6bf450c-93dc-494a-aef0-351950021925",
      "name": "Wait4",
      "webhookId": "05e8223c-977a-4111-b8c6-a05fe63e8477"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.URL }}",
                    "rightValue": "Not Found",
                    "operator": {
                      "type": "string",
                      "operation": "notEquals"
                    },
                    "id": "39e71ac9-9c2d-4b6b-95fa-ec3070cc6a9e"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9057543e-d9ac-4ff2-b798-a069125d48a5",
                    "leftValue": "={{ $json.URL }}",
                    "rightValue": "Not Found",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        360,
        1195
      ],
      "id": "cdec8ed0-1d96-4bdd-86ec-e9b4f28b24e6",
      "name": "Switch4"
    },
    {
      "parameters": {
        "url": "https://api.apollo.io/api/v1/organizations/enrich",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "domain",
              "value": "={{$('Code').first().json.domain}}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-Api-Key",
              "value": "<Apollo Api key here>"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2160,
        980
      ],
      "id": "3334649d-2a33-49de-bc78-0e53b7c47f74",
      "name": "Apollo Organization Details2",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"company_name\": \"{{ $('Apollo Organization Details2').item.json.organization.name || 'Not Found' }}\",\n  \"founded_year\": \"{{ $('Apollo Organization Details2').item.json.organization.founded_year || 'Not Found' }}\",\n  \"primary_industry\": \"{{ $('Apollo Organization Details2').item.json.organization.industry || 'Not Found' }}\",\n  \"secondary_industry\": \"{{ $('Apollo Organization Details2').item.json.organization.industries && $('Apollo Organization Details2').item.json.organization.industries[1] ? $('Apollo Organization Details2').item.json.organization.industries[1] : 'Not Found' }}\",\n  \"employee_count\": \"{{ $('Apollo Organization Details2').item.json.organization.estimated_num_employees || 'Not Found' }}\",\n  \"annual_revenue\": \"{{ $('Apollo Organization Details2').item.json.organization.annual_revenue_printed || 'Not Found' }}\",\n  \"total_funding\": \"{{ $('Apollo Organization Details2').item.json.organization.total_funding_printed || 'Not Found' }}\",\n  \"latest_funding_round_date\": \"{{ $('Apollo Organization Details2').item.json.organization.latest_funding_round_date || 'Not Found' }}\",\n  \"linkedin_url\": \"{{ $('Apollo Organization Details2').item.json.organization.linkedin_url || 'Not Found' }}\",\n  \"twitter_url\": \"{{ $('Apollo Organization Details2').item.json.organization.twitter_url || 'Not Found' }}\",\n  \"facebook_url\": \"{{ $('Apollo Organization Details2').item.json.organization.facebook_url || 'Not Found' }}\",\n  \"keywords\": \"{{ $('Apollo Organization Details2').item.json.organization.keywords ? $('Apollo Organization Details2').item.json.organization.keywords.filter(k => k).slice(0,6).join(', ') : 'Not Found' }}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2380,
        980
      ],
      "id": "fe223077-0b2e-4c1c-a099-1618a65d8d4f",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "zone": {
          "__rl": true,
          "value": "web_unlocker1",
          "mode": "list",
          "cachedResultName": "web_unlocker1"
        },
        "country": {
          "__rl": true,
          "mode": "list",
          "value": "us"
        },
        "url": "={{ $('Get row(s) in sheet').item.json.Website }}",
        "requestOptions": {}
      },
      "type": "@brightdata/n8n-nodes-brightdata.brightData",
      "typeVersion": 1,
      "position": [
        2600,
        980
      ],
      "id": "f1a5c03a-17b1-4b96-b4e6-966d564c7fd9",
      "name": "Website Scraping via Brightdata Official Node",
      "credentials": {}
      }
    },
    {
      "parameters": {
        "jsCode": "// n8n Code (JavaScript) node\n// Input: $input.first().json (HTML in `body` or `data`, or a raw string)\n// Output: { clean_html, removed: { blocks, anchors, urls } }\n\ntry {\n  // ---- get input safely from $input.first().json ----\n  const input = $input.first()?.json ?? {};\n  let raw = typeof input === \"string\"\n    ? input\n    : String(input.body ?? input.data ?? input.html ?? \"\");\n\n  // ---- remove big nav/chrome blocks ----\n  function stripNavigationBlocks(html) {\n    let removedBlocks = 0;\n    const patterns = [\n      /<nav\\b[^>]*>[\\s\\S]*?<\\/nav>/gi,\n      /<(header|footer|aside)\\b[^>]*>[\\s\\S]*?<\\/\\1>/gi,\n      /<([a-z0-9:-]+)\\b[^>]*\\brole\\s*=\\s*[\"']?navigation[\"']?[^>]*>[\\s\\S]*?<\\/\\1>/gi,\n      /<([a-z0-9:-]+)\\b[^>]*\\b(id|class)\\s*=\\s*[\"'][^\"']*\\b(nav|navbar|menu|menubar|mega-menu|sidenav|sidebar|site-nav|header-nav|footer-nav|topbar|breadcrumbs?|breadcrumb-trail|pagination|pager|cookie|consent|gdpr|cookie-banner)\\b[^\"']*[\"'][^>]*>[\\s\\S]*?<\\/\\1>/gi,\n    ];\n    for (const rx of patterns) {\n      html = html.replace(rx, () => { removedBlocks++; return \"\"; });\n    }\n    return { html, removedBlocks };\n  }\n\n  // ---- unwrap nav-ish anchors, drop anchors that show naked URLs ----\n  function stripNavAnchors(html) {\n    let removedAnchors = 0;\n    const navWords = new Set([\n      \"home\",\"about\",\"contact\",\"services\",\"pricing\",\"blog\",\"news\",\"careers\",\"jobs\",\"faq\",\n      \"help\",\"support\",\"login\",\"log in\",\"sign in\",\"signup\",\"sign up\",\"register\",\"account\",\n      \"profile\",\"dashboard\",\"cart\",\"privacy\",\"terms\",\"cookies\",\"sitemap\",\"next\",\"prev\",\"previous\",\n      \"more\",\"menu\",\"back\",\"subscribe\"\n    ]);\n    const hrefNavPatterns = [\n      /^#/,\n      /^javascript:/i,\n      /\\/(category|categories|tag|topics)\\b/i,\n      /\\/(login|signin|signup|register|account|profile)\\b/i,\n      /\\/(privacy|terms|cookies|legal|gdpr)\\b/i,\n      /\\/(sitemap|search|feed|rss)\\b/i,\n      /[?&](page|utm_|fbclid|gclid|ref|sort|filter)=/i,\n      /\\/page\\/\\d+/i\n    ];\n    const urlTextRx = /\\b(https?:\\/\\/[^\\s<>\"']+|www\\.[^\\s<>\"']+|[a-zA-Z0-9.-]+\\.(com|org|net|io|co|ai|dev|app|site|info|biz|news|gov|edu|in|uk|us|ca|au|de|fr|jp|cn)(\\/[^\\s<>\"']*)?)\\b/;\n\n    function looksNavAnchor(attrs, text) {\n      const t = (text || \"\").trim().toLowerCase();\n      const shortish = t.length <= 30;\n      const hasNavWord = navWords.has(t) || [...navWords].some(w => t.startsWith(w + \" \"));\n\n      const cls = ((attrs.match(/\\bclass\\s*=\\s*[\"']([^\"']+)[\"']/i)?.[1]) || \"\").toLowerCase();\n      const role = ((attrs.match(/\\brole\\s*=\\s*[\"']([^\"']+)[\"']/i)?.[1]) || \"\").toLowerCase();\n      const href = ((attrs.match(/\\bhref\\s*=\\s*[\"']([^\"']+)[\"']/i)?.[1]) || \"\").toLowerCase();\n\n      const clsNav = /\\b(nav|navbar|menu|menubar|breadcrumbs?|pagination|pager|btn|button|tab|footer|header|sidenav|sidebar)\\b/i.test(cls);\n      const roleNav = /\\b(navigation|menuitem|tab|button)\\b/i.test(role);\n      const hrefNav = href && hrefNavPatterns.some(rx => rx.test(href));\n\n      return clsNav || roleNav || (hrefNav && (shortish || hasNavWord));\n    }\n\n    html = html.replace(/<a\\b([^>]*)>([\\s\\S]*?)<\\/a>/gi, (m, attrs, inner) => {\n      const innerText = inner.replace(/<[^>]+>/g, \" \").replace(/\\s+/g, \" \").trim();\n\n      if (urlTextRx.test(innerText)) {\n        removedAnchors++;\n        return \"\";\n      }\n\n      if (looksNavAnchor(attrs, innerText)) {\n        removedAnchors++;\n        return innerText;\n      }\n\n      return m;\n    });\n\n    return { html, removedAnchors };\n  }\n\n  // ---- remove visible (plaintext) URLs from text nodes ----\n  function removeVisibleUrls(html) {\n    let urlsRemoved = 0;\n    const urlRx = /\\b(https?:\\/\\/[^\\s<>\"']+|www\\.[^\\s<>\"']+|[a-zA-Z0-9.-]+\\.(com|org|net|io|co|ai|dev|app|site|info|biz|news|gov|edu|in|uk|us|ca|au|de|fr|jp|cn)(\\/[^\\s<>\"']*)?)\\b/g;\n\n    const parts = html.split(/(<[^>]+>)/g);\n    for (let i = 0; i < parts.length; i++) {\n      if (i % 2 === 0) {\n        parts[i] = parts[i].replace(urlRx, () => { urlsRemoved++; return \"\"; }).replace(/\\s{2,}/g, \" \");\n      }\n    }\n    return { html: parts.join(\"\"), urlsRemoved };\n  }\n\n  // ---- light HTML minify ----\n  function lightMinifyHtml(html){\n    return html\n      .replace(/<!--[\\s\\S]*?-->/g, \"\")\n      .replace(/<script\\b[^>]*>[\\s\\S]*?<\\/script>/gi, \"\")\n      .replace(/<style\\b[^>]*>[\\s\\S]*?<\\/style>/gi, \"\")\n      .replace(/\\s+/g, \" \")\n      .replace(/>\\s+</g, \"><\")\n      .trim();\n  }\n\n  // ---- pipeline ----\n  let html = raw;\n  const b1 = stripNavigationBlocks(html);\n  html = b1.html;\n\n  const a1 = stripNavAnchors(html);\n  html = a1.html;\n\n  const u1 = removeVisibleUrls(html);\n  html = u1.html;\n\n  html = lightMinifyHtml(html);\n\n  return [{\n    json: {\n      clean_html: html,\n      removed: { blocks: b1.removedBlocks, anchors: a1.removedAnchors, urls: u1.urlsRemoved }\n    }\n  }];\n\n} catch {\n  const input = $input.first()?.json ?? {};\n  const fallback = typeof input === \"string\"\n    ? input\n    : String(input.body ?? input.data ?? input.html ?? \"\");\n  return [{\n    json: {\n      clean_html: fallback,\n      removed: { blocks: 0, anchors: 0, urls: 0 },\n      note: \"returned original html (fallback)\"\n    }\n  }];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2820,
        980
      ],
      "id": "b348ddd7-1deb-4323-b5bd-dc06fe0af618",
      "name": "Code12"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.clean_html }}",
        "options": {
          "systemMessage": "=SYSTEM PROMPT — “SCRAPED WEBSITE → SUMMARY + EMAIL”\n\nROLE\nYou are a meticulous research summarizer and on-page email extractor. Given raw, messy website content (HTML/text extracted by a scraper), produce:\n1) a crisp business summary, and\n2) a single best email address found on the page(s).\n\nSOURCES & SCOPE\n- Use ONLY the provided input (raw_html, url, captured_at, optional_extracted). Do NOT browse the web.\n- Do NOT guess emails. Only output an email that appears in the provided text. If none is found, return \"Not Found\".\n\nINPUT FORMAT (examples)\n- raw_html: full HTML or large text blob\n- url: the page URL (homepage or subpage)\n- captured_at: ISO date when scraped\n- optional_extracted: arrays of visible links, headings, meta tags, Open Graph, schema.org, text fragments\n\nGOALS (in order)\n1) Summarize what the company does (industry, core offer, who they serve) in 1–2 sentences, factual and non-promotional.\n2) If present in the provided text, append concise factual signals to the same summary: revenue, employee count, and founding year (e.g., “Founded 2016; ~120 employees; ~$8–10M revenue”).\n3) Extract one email address from the provided content.\n\nDATA SIGNALS TO USE IN SUMMARY (ONLY if explicitly present)\n- Revenue: normalize to concise form (e.g., ~$8–10M, ₹120–140 Cr, “$1B+”). Accept “annual revenue,” “ARR,” “GMV” if clearly labeled.\n- Employee count: phrases like “X employees,” “team of X,” “X–Y people.”\n- Founding year: “Founded YEAR,” “established YEAR,” or schema.org foundingDate.\n- Keep these at the end of the summary; semicolon-separated; omit if not found.\n\nEMAIL EXTRACTION RULES\n- Search the provided text for email-like patterns, including:\n  - Standard: name@domain.tld\n  - mailto: links\n  - Obfuscated: name [at] domain [dot] com, name(at)domain(dot)com, name @ domain . com\n- De-obfuscate by converting [at], (at),  at , &#64; → @; and [dot], (dot),  dot , · → .\n- Decode HTML entities; trim trailing punctuation (commas, periods, parentheses).\n- Validate format (simple): local@domain.tld (RFC-perfect not required). Reject obvious placeholders (example@, test@, noreply@), images with text, or forms without visible emails.\n- If multiple emails are present, select ONE according to this priority:\n  1) Named person at the company domain (e.g., firstname.lastname@company.com)\n  2) Role-based but specific (sales@, partnerships@, press@)\n  3) Generic catch-all (info@, hello@, contact@)\n  4) If only external domains (e.g., gmail) appear, choose the most clearly tied to the business; otherwise prefer the company domain.\n- If no valid email remains after de-obfuscation and validation, return \"Email\": \"Not Found\".\n\nWRITING RULES\n- Be concise, precise, and avoid hype.\n- Quote taglines only if clearly marked and useful; otherwise paraphrase.\n- Do not invent facts, numbers, clients, or emails.\n- If the page is clearly a listing/third-party page, summarize cautiously; do not infer beyond the text.\n\nOUTPUT FORMAT (strict JSON; no extra text, no backticks)\n{\n  \"Summary\": \"1–2 sentences describing the business (append founded year, headcount, and revenue if explicitly present).\",\n  \"Email\": \"name@company.com | Not Found\"\n}\n\nQUALITY CHECKS (before finalizing)\n- Hallucination check: every word traceable to input.\n- Numbers/dates normalization: preserve units/symbols; use compact ranges where applicable.\n- Email check: appears in input after de-obfuscation and passes simple validation.\n- Brevity check: Summary ≤ 2 sentences, clear and useful for outreach.\n\nFAILURE MODE\n- If the input is too thin/noisy to summarize, set:\n  \"Summary\": \"Not Found\"\n  \"Email\": \"Not Found\"\nand do not add extra fields.\n\nOUTPUT ONLY THE JSON OBJECT. DO NOT include explanations, markdown, or extra text.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        3040,
        980
      ],
      "id": "27b8539f-1c0f-4921-a546-e88f7c62e39d",
      "name": "AI Agent3"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3120,
        1140
      ],
      "id": "0c397d3c-d9cf-4fd2-b618-fe11ec4529fc",
      "name": "Google Gemini Chat Model3",
      "credentials": {}
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Website homepage summary -  {{ $('AI Agent3').item.json.output }}\n\nCompany Apollo Data - \n{\n  \"company_name\": \"{{ $('Apollo Organization Details2').item.json.organization.name || 'Not Found' }}\",\n  \"founded_year\": \"{{ $('Apollo Organization Details2').item.json.organization.founded_year || 'Not Found' }}\",\n  \"primary_industry\": \"{{ $('Apollo Organization Details2').item.json.organization.industry || 'Not Found' }}\",\n  \"secondary_industry\": \"{{ $('Apollo Organization Details2').item.json.organization.industries && $('Apollo Organization Details2').item.json.organization.industries[1] ? $('Apollo Organization Details2').item.json.organization.industries[1] : 'Not Found' }}\",\n  \"employee_count\": \"{{ $('Apollo Organization Details2').item.json.organization.estimated_num_employees || 'Not Found' }}\",\n  \"annual_revenue\": \"{{ $('Apollo Organization Details2').item.json.organization.annual_revenue_printed || 'Not Found' }}\",\n  \"total_funding\": \"{{ $('Apollo Organization Details2').item.json.organization.total_funding_printed || 'Not Found' }}\",\n  \"latest_funding_round_date\": \"{{ $('Apollo Organization Details2').item.json.organization.latest_funding_round_date || 'Not Found' }}\",\n  \"linkedin_url\": \"{{ $('Apollo Organization Details2').item.json.organization.linkedin_url || 'Not Found' }}\",\n  \"twitter_url\": \"{{ $('Apollo Organization Details2').item.json.organization.twitter_url || 'Not Found' }}\",\n  \"facebook_url\": \"{{ $('Apollo Organization Details2').item.json.organization.facebook_url || 'Not Found' }}\",\n  \"keywords\": \"{{ $('Apollo Organization Details2').item.json.organization.keywords ? $('Apollo Organization Details2').item.json.organization.keywords.filter(k => k).slice(0,6).join(', ') : 'Not Found' }}\"\n}\n\n\nOwler data -\n\nRevenue - {{ $('Download the snapshot content1').item.json.revenue }}\nFounded - {{ $('Download the snapshot content1').item.json.founded }}\nEmployee count - {{ $('Download the snapshot content1').item.json.employeeCount }}\nSummary - {{ $('Download the snapshot content1').item.json.summarySection }}\ntotal funding - {{ $('Download the snapshot content1').item.json.totalFunding }}\n\n\n\nCeo Details - \n\nFull name - {{ $('Download the snapshot content1').item.json.ceoDetail.firstName }} {{ $('Download the snapshot content1').item.json.ceoDetail.lastName }}\n\n\nLinkedin - {{ $('Download the snapshot content1').item.json.ceoDetail.linkedIn }}\n\n\n\n\nCompany Socials - \n\n{{ $('Download the snapshot content1').item.json.links[0].linkType }} - {{ $('Download the snapshot content1').item.json.links[0].link }}\n\n{{ $('Download the snapshot content1').item.json.links[1].linkType }} - {{ $('Download the snapshot content1').item.json.links[1].link }}\n\n\n{{ $('Download the snapshot content1').item.json.links[2].linkType }} - {{ $('Download the snapshot content1').item.json.links[2].link }}",
        "options": {
          "systemMessage": "=SYSTEM PROMPT — “HYPER-PERSONALIZED OUTREACH EMAIL”\n\nROLE  \nYou are a world-class B2B copywriter and outbound strategist.  \nYour task is to write a *hyper-personalized cold outreach email* for a lead, and return it as a JSON object called `PersonalizedEmail`.\n\nINPUT SOURCES  \nYou will receive multiple structured inputs (e.g., Owler data, Apollo data, website-scraped summary). Use these only — do not invent facts. If something is missing, omit it gracefully.  \n\nFIELDS (examples):  \n- Business Description: 1.7  \n- Services Offered: 1.8  \n- Unique Selling Proposition (USP): 1.9  \n- Additional Pointers: 1.11  \n- Testimonials (summary): 1.10\n\nOBJECTIVES  \n- **Subject line**: curiosity-driven, professional, 6–10 words, no clickbait, not generic.  \n- **Email body**:  \n  - 150–175 words, conversational HTML.  \n  - Start with “Hi [first name]” or “Hi [first name] & Team”.  \n  - Open with a real insight/observation — never with “Hope you’re doing well.”  \n  - Acknowledge their business type, growth stage, or challenge (e.g., missed follow-ups, manual bottlenecks, scaling pain).  \n  - Briefly introduce *our_product* (automation / AI services) as a relevant solution.  \n  - Keep it light, peer-to-peer, consultative.  \n  - Use short paragraphs or bullets for readability.  \n  - Close with a soft CTA like: “Would it make sense to send over a quick walkthrough?”  \n  - Always end with a short, human PS referencing something real (a news item, service line, testimonial, or milestone).  \n\nTONE  \n- Human, sharp, respectful.  \n- No corporate fluff, no exaggerated claims.  \n- Assume email is coming from a small but skilled agency.  \n\nQUALIFICATION LOGIC  \n- If the email got from the website is a personal / business email, not sales or contact or support email then, mark as `\"Qualified\"`.  \n- Otherwise mark as `\"Disqualified\"`.  \n- If the Email is support, help or @gmail then mark as `\"Disqualified\"`.  \n\nOUTPUT FORMAT (strict JSON; no extra text, no backticks):  \n{\n  \"PersonalizedEmail\": {\n    \"subject\": \"[Compelling personalized subject line]\",\n    \"body\": \"[Email body in HTML, conversational yet professional]\",\n    \"follow_up_notes\": \"[Suggestions for sales team: next-step angles, pain points to dig into]\",\n    \"Qualified / Disqualified\": \"Qualified | Disqualified\",\n    \"Revenue\": \"If the data is given then write the revenue or else give Not Available as answer\",\n    \"Employee count\": \"If the data is given then write the employee count or else give Not Available as answer\",\n    \"Founded Year\": \"If the data is given then write the Founded Year or else give Not Available as answer\"\n  }\n}\n\nREQUIREMENTS  \n- Only output the JSON object.  \n- Do not add any explanations, markdown, or commentary.  \n- If data is missing, still produce a natural-sounding email without placeholders.  \n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        3620,
        980
      ],
      "id": "74c8acee-012d-4189-a9f5-ff18626a748b",
      "name": "AI Agent4"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        3700,
        1160
      ],
      "id": "a1ffd20c-cd48-42a6-b524-5b8892e04c98",
      "name": "OpenAI Chat Model",
      "credentials": {}
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Parse a string from $input.first().json.output\n * and return:\n * [{ json: { PersonalizedEmail: { subject, body, follow_up_notes, qualification } } }].\n */\n\nfunction stripCodeFences(str) {\n  if (typeof str !== 'string') return str;\n  return str\n    .replace(/^```json\\s*/i, '')\n    .replace(/^```\\s*/i, '')\n    .replace(/```$/i, '')\n    .trim();\n}\n\nfunction extractJsonString(raw) {\n  if (typeof raw !== 'string') throw new Error('Expected a string in \"output\".');\n  const deFenced = stripCodeFences(raw);\n\n  // Try direct parse\n  try { return JSON.parse(deFenced); } catch {}\n\n  // Find first top-level {...}\n  const start = deFenced.indexOf('{');\n  const end   = deFenced.lastIndexOf('}');\n  if (start === -1 || end === -1 || end <= start) {\n    throw new Error('No JSON object found in \"output\".');\n  }\n\n  const candidate = deFenced.slice(start, end + 1);\n\n  // Try parse candidate\n  try { return JSON.parse(candidate); }\n  catch (e) {\n    // Fallback: handle double-encoded-ish strings\n    try { return JSON.parse(JSON.parse(`\"${candidate.replace(/\"/g, '\\\\\"')}\"`)); }\n    catch { throw new Error('Failed to parse JSON from \"output\". ' + e.message); }\n  }\n}\n\nfunction normalizeResult(obj) {\n  if (!obj || typeof obj !== 'object') throw new Error('Parsed value is not an object.');\n  const root = obj.PersonalizedEmail || obj.personalizedEmail || obj.email || obj;\n\n  if (!root || typeof root !== 'object') {\n    throw new Error('Missing \"PersonalizedEmail\" object.');\n  }\n\n  const subject = root.subject ?? '';\n  const body = root.body ?? '';\n  const follow_up_notes = root.follow_up_notes ?? root.followUpNotes ?? '';\n\n  // Handle key with spaces and slash + common fallbacks\n  const qualification =\n    root[\"Qualified / Disqualified\"] ??\n    root.qualification ??\n    root.Qualified ??\n    root.status ??\n    '';\n\n  if (typeof subject !== 'string' || typeof body !== 'string') {\n    throw new Error('Invalid \"subject\" or \"body\" type.');\n  }\n\n  return { subject, body, follow_up_notes, qualification };\n}\n\n/** ---------- n8n Code node (v2) ---------- */\nconst rawOutput = $input.first()?.json?.output;\n\nif (typeof rawOutput !== 'string' || !rawOutput.trim()) {\n  throw new Error('No \"output\" string found on first item.');\n}\n\nconst parsed = extractJsonString(rawOutput);\nconst result = normalizeResult(parsed);\n\n// Must return an array of items\nreturn [\n  {\n    json: {\n      PersonalizedEmail: result,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3980,
        980
      ],
      "id": "e57b0633-7419-4137-b048-75f57dc3b177",
      "name": "Code4"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1Y1T_KMQ5_bl85-1jHW50Trtw7Rf_hMDo87VgvMZj2tw",
          "mode": "list",
          "cachedResultName": "Lead Gen for Real Estate",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/<Google Sheet ID here>/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 65921188,
          "mode": "list",
          "cachedResultName": "Main Sheet",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/<Google Sheet ID here>/edit#gid=65921188"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Full Name": "={{ (() => { \n  const e = String($('Code3').item.json.Email ?? '').trim();\n  return (e && e.includes('@')) ? e.split('@')[0] : 'Not Found';\n})() }}\n",
            "Email": "={{ (e => {\n  e = String($('Code3').item.json.Email ?? '').trim();\n  return e ? e : 'Not Found';\n})() }}\n",
            "Website": "={{ $('Limit').item.json.Website }}",
            "Phone number": "={{ $('Limit').item.json['Phone number'] }}",
            "Subject": "={{ $json.PersonalizedEmail.subject }}",
            "Body": "={{ $json.PersonalizedEmail.body }}",
            "Qualified / Disqualified": "={{ $json.PersonalizedEmail.qualification }}",
            "Follow Up Notes": "={{ $json.PersonalizedEmail.follow_up_notes }}",
            "Revenue": "={{ $json.PersonalizedEmail.revenue }}",
            "Employee Count": "={{ $json.PersonalizedEmail.employee_count }}",
            "Founded Year": "={{ $json.PersonalizedEmail.founded_year }}",
            "Summary": "={{ $('AI Agent3').item.json.output }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Full Name",
              "displayName": "Full Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Email",
              "displayName": "Email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Website",
              "displayName": "Website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone number",
              "displayName": "Phone number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Subject",
              "displayName": "Subject",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Body",
              "displayName": "Body",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Follow Up Notes",
              "displayName": "Follow Up Notes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Qualified / Disqualified",
              "displayName": "Qualified / Disqualified",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Revenue",
              "displayName": "Revenue",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Employee Count",
              "displayName": "Employee Count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Founded Year",
              "displayName": "Founded Year",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Summary",
              "displayName": "Summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        4200,
        980
      ],
      "id": "ee48e4ec-cae6-4a48-98c3-2af1612238c0",
      "name": "Append row in sheet",
      "credentials": {}
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "seconds",
              "secondsInterval": 75
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1300,
        1200
      ],
      "id": "5c8243b0-5de0-4e72-81d2-a6aac9109638",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1Y1T_KMQ5_bl85-1jHW50Trtw7Rf_hMDo87VgvMZj2tw",
          "mode": "list",
          "cachedResultName": "Lead Gen for Real Estate",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/<Google Sheet ID here>/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 954930494,
          "mode": "list",
          "cachedResultName": "Raw Serp Data",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/<Google Sheet ID here>/edit#gid=954930494"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_number": "={{ $('Get row(s) in sheet').item.json.row_number }}",
            "Qualified /Disqualified": "={{ $json.PersonalizedEmail.qualification }}"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Website",
              "displayName": "Website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone number",
              "displayName": "Phone number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Rating",
              "displayName": "Rating",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Rating Count",
              "displayName": "Rating Count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "City",
              "displayName": "City",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Neighborhood",
              "displayName": "Neighborhood",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Qualified /Disqualified",
              "displayName": "Qualified /Disqualified",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Added to Main sheet",
              "displayName": "Added to Main sheet",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        4420,
        980
      ],
      "id": "b705e02b-519a-4454-9778-a431f9addeab",
      "name": "Update row in sheet1",
      "credentials": {}
      }
    },
    {
      "parameters": {
        "url": "https://api.apollo.io/api/v1/organizations/enrich",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "domain",
              "value": "={{$('Code').first().json.domain}}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-Api-Key",
              "value": "<Apollo Api key here>"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        540,
        1480
      ],
      "id": "5ad1ddc0-7a61-425f-abd2-e8e3b5d5da1f",
      "name": "Apollo Organization Details",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"company_name\": \"{{ $('Apollo Organization Details').item.json.organization.name || 'Not Found' }}\",\n  \"founded_year\": \"{{ $('Apollo Organization Details').item.json.organization.founded_year || 'Not Found' }}\",\n  \"primary_industry\": \"{{ $('Apollo Organization Details').item.json.organization.industry || 'Not Found' }}\",\n  \"secondary_industry\": \"{{ $('Apollo Organization Details').item.json.organization.industries && $('Apollo Organization Details').item.json.organization.industries[1] ? $('Apollo Organization Details').item.json.organization.industries[1] : 'Not Found' }}\",\n  \"employee_count\": \"{{ $('Apollo Organization Details').item.json.organization.estimated_num_employees || 'Not Found' }}\",\n  \"annual_revenue\": \"{{ $('Apollo Organization Details').item.json.organization.annual_revenue_printed || 'Not Found' }}\",\n  \"total_funding\": \"{{ $('Apollo Organization Details').item.json.organization.total_funding_printed || 'Not Found' }}\",\n  \"latest_funding_round_date\": \"{{ $('Apollo Organization Details').item.json.organization.latest_funding_round_date || 'Not Found' }}\",\n  \"linkedin_url\": \"{{ $('Apollo Organization Details').item.json.organization.linkedin_url || 'Not Found' }}\",\n  \"twitter_url\": \"{{ $('Apollo Organization Details').item.json.organization.twitter_url || 'Not Found' }}\",\n  \"facebook_url\": \"{{ $('Apollo Organization Details').item.json.organization.facebook_url || 'Not Found' }}\",\n  \"keywords\": \"{{ $('Apollo Organization Details').item.json.organization.keywords ? $('Apollo Organization Details').item.json.organization.keywords.filter(k => k).slice(0,6).join(', ') : 'Not Found' }}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        760,
        1480
      ],
      "id": "2054cf4d-6e72-4e2c-826b-34f37e6da99a",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "zone": {
          "__rl": true,
          "value": "web_unlocker1",
          "mode": "list",
          "cachedResultName": "web_unlocker1"
        },
        "country": {
          "__rl": true,
          "mode": "list",
          "value": "us"
        },
        "url": "={{ $('Get row(s) in sheet').item.json.Website }}",
        "requestOptions": {}
      },
      "type": "@brightdata/n8n-nodes-brightdata.brightData",
      "typeVersion": 1,
      "position": [
        980,
        1480
      ],
      "id": "0d0ae3c2-e50f-4907-95e2-8b33db142b69",
      "name": "Website Scraping via Brightdata Official Node1",
      "credentials": {}
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json }}",
        "options": {
          "systemMessage": "SYSTEM PROMPT — “SCRAPED WEBSITE → SUMMARY + EMAIL”\n\nROLE\nYou are a meticulous research summarizer and on-page email extractor. Given raw, messy website content (HTML/text extracted by a scraper), produce:\n1) a crisp business summary, and\n2) a single best email address found on the page(s).\n\nSOURCES & SCOPE\n- Use ONLY the provided input (raw_html, url, captured_at, optional_extracted). Do NOT browse the web.\n- Do NOT guess emails. Only output an email that appears in the provided text. If none is found, return \"Not Found\".\n\nINPUT FORMAT (examples)\n- raw_html: full HTML or large text blob\n- url: the page URL (homepage or subpage)\n- captured_at: ISO date when scraped\n- optional_extracted: arrays of visible links, headings, meta tags, Open Graph, schema.org, text fragments\n\nGOALS (in order)\n1) Summarize what the company does (industry, core offer, who they serve) in 1–2 sentences, factual and non-promotional.\n2) If present in the provided text, append concise factual signals to the same summary: revenue, employee count, and founding year (e.g., “Founded 2016; ~120 employees; ~$8–10M revenue”).\n3) Extract one email address from the provided content.\n\nDATA SIGNALS TO USE IN SUMMARY (ONLY if explicitly present)\n- Revenue: normalize to concise form (e.g., ~$8–10M, ₹120–140 Cr, “$1B+”). Accept “annual revenue,” “ARR,” “GMV” if clearly labeled.\n- Employee count: phrases like “X employees,” “team of X,” “X–Y people.”\n- Founding year: “Founded YEAR,” “established YEAR,” or schema.org foundingDate.\n- Keep these at the end of the summary; semicolon-separated; omit if not found.\n\nEMAIL EXTRACTION RULES\n- Search the provided text for email-like patterns, including:\n  - Standard: name@domain.tld\n  - mailto: links\n  - Obfuscated: name [at] domain [dot] com, name(at)domain(dot)com, name @ domain . com\n- De-obfuscate by converting [at], (at),  at , &#64; → @; and [dot], (dot),  dot , · → .\n- Decode HTML entities; trim trailing punctuation (commas, periods, parentheses).\n- Validate format (simple): local@domain.tld (RFC-perfect not required). Reject obvious placeholders (example@, test@, noreply@), images with text, or forms without visible emails.\n- If multiple emails are present, select ONE according to this priority:\n  1) Named person at the company domain (e.g., firstname.lastname@company.com)\n  2) Role-based but specific (sales@, partnerships@, press@)\n  3) Generic catch-all (info@, hello@, contact@)\n  4) If only external domains (e.g., gmail) appear, choose the most clearly tied to the business; otherwise prefer the company domain.\n- If no valid email remains after de-obfuscation and validation, return \"Email\": \"Not Found\".\n\nWRITING RULES\n- Be concise, precise, and avoid hype.\n- Quote taglines only if clearly marked and useful; otherwise paraphrase.\n- Do not invent facts, numbers, clients, or emails.\n- If the page is clearly a listing/third-party page, summarize cautiously; do not infer beyond the text.\n\nOUTPUT FORMAT (strict JSON; no extra text, no backticks)\n{\n  \"Summary\": \"1–2 sentences describing the business (append founded year, headcount, and revenue if explicitly present).\",\n  \"Email\": \"name@company.com | Not Found\"\n}\n\nQUALITY CHECKS (before finalizing)\n- Hallucination check: every word traceable to input.\n- Numbers/dates normalization: preserve units/symbols; use compact ranges where applicable.\n- Email check: appears in input after de-obfuscation and passes simple validation.\n- Brevity check: Summary ≤ 2 sentences, clear and useful for outreach.\n\nFAILURE MODE\n- If the input is too thin/noisy to summarize, set:\n  \"Summary\": \"Not Found\"\n  \"Email\": \"Not Found\"\nand do not add extra fields.\n\nOUTPUT ONLY THE JSON OBJECT. DO NOT include explanations, markdown, or extra text.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1220,
        1480
      ],
      "id": "b1e72e41-fabd-4946-b3d0-2f0b5c09cab1",
      "name": "AI Agent5"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1300,
        1640
      ],
      "id": "e9b55d04-bcbc-4cda-ae20-d1780a8f07e5",
      "name": "Google Gemini Chat Model4",
      "credentials": {}
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Website homepage summary -  {{ $('AI Agent5').item.json.output }}\n\nCompany Apollo Data - \n{\n  \"company_name\": \"{{ $('Apollo Organization Details').item.json.organization.name || 'Not Found' }}\",\n  \"founded_year\": \"{{ $('Apollo Organization Details').item.json.organization.founded_year || 'Not Found' }}\",\n  \"primary_industry\": \"{{ $('Apollo Organization Details').item.json.organization.industry || 'Not Found' }}\",\n  \"secondary_industry\": \"{{ $('Apollo Organization Details').item.json.organization.industries && $('Apollo Organization Details').item.json.organization.industries[1] ? $('Apollo Organization Details').item.json.organization.industries[1] : 'Not Found' }}\",\n  \"employee_count\": \"{{ $('Apollo Organization Details').item.json.organization.estimated_num_employees || 'Not Found' }}\",\n  \"annual_revenue\": \"{{ $('Apollo Organization Details').item.json.organization.annual_revenue_printed || 'Not Found' }}\",\n  \"total_funding\": \"{{ $('Apollo Organization Details').item.json.organization.total_funding_printed || 'Not Found' }}\",\n  \"latest_funding_round_date\": \"{{ $('Apollo Organization Details').item.json.organization.latest_funding_round_date || 'Not Found' }}\",\n  \"linkedin_url\": \"{{ $('Apollo Organization Details').item.json.organization.linkedin_url || 'Not Found' }}\",\n  \"twitter_url\": \"{{ $('Apollo Organization Details').item.json.organization.twitter_url || 'Not Found' }}\",\n  \"facebook_url\": \"{{ $('Apollo Organization Details').item.json.organization.facebook_url || 'Not Found' }}\",\n  \"keywords\": \"{{ $('Apollo Organization Details').item.json.organization.keywords ? $('Apollo Organization Details').item.json.organization.keywords.filter(k => k).slice(0,6).join(', ') : 'Not Found' }}\"\n}\n\n\n",
        "options": {
          "systemMessage": "=SYSTEM PROMPT — “HYPER-PERSONALIZED OUTREACH EMAIL”\n\nROLE  \nYou are a world-class B2B copywriter and outbound strategist.  \nYour task is to write a *hyper-personalized cold outreach email* for a lead, and return it as a JSON object called `PersonalizedEmail`.\n\nINPUT SOURCES  \nYou will receive multiple structured inputs (e.g., Owler data, Apollo data, website-scraped summary). Use these only — do not invent facts. If something is missing, omit it gracefully.  \n\nFIELDS (examples):  \n- Business Description: 1.7  \n- Services Offered: 1.8  \n- Unique Selling Proposition (USP): 1.9  \n- Additional Pointers: 1.11  \n- Testimonials (summary): 1.10\n\nOBJECTIVES  \n- **Subject line**: curiosity-driven, professional, 6–10 words, no clickbait, not generic.  \n- **Email body**:  \n  - 150–175 words, conversational HTML.  \n  - Start with “Hi [first name]” or “Hi [first name] & Team”.  \n  - Open with a real insight/observation — never with “Hope you’re doing well.”  \n  - Acknowledge their business type, growth stage, or challenge (e.g., missed follow-ups, manual bottlenecks, scaling pain).  \n  - Briefly introduce *our_product* (automation / AI services) as a relevant solution.  \n  - Keep it light, peer-to-peer, consultative.  \n  - Use short paragraphs or bullets for readability.  \n  - Close with a soft CTA like: “Would it make sense to send over a quick walkthrough?”  \n  - Always end with a short, human PS referencing something real (a news item, service line, testimonial, or milestone).  \n\nTONE  \n- Human, sharp, respectful.  \n- No corporate fluff, no exaggerated claims.  \n- Assume email is coming from a small but skilled agency.  \n\nQUALIFICATION LOGIC  \n- If the email got from the website is a personal / business email, not sales or contact or support email then, mark as `\"Qualified\"`.  \n- Otherwise mark as `\"Disqualified\"`.  \n- If the Email is support, help or @gmail then mark as `\"Disqualified\"`.  \n\nOUTPUT FORMAT (strict JSON; no extra text, no backticks):  \n{\n  \"PersonalizedEmail\": {\n    \"subject\": \"[Compelling personalized subject line]\",\n    \"body\": \"[Email body in HTML, conversational yet professional]\",\n    \"follow_up_notes\": \"[Suggestions for sales team: next-step angles, pain points to dig into]\",\n    \"Qualified / Disqualified\": \"Qualified | Disqualified\",\n    \"Revenue\": \"If the data is given then write the revenue or else give Not Available as answer\",\n    \"Employee count\": \"If the data is given then write the employee count or else give Not Available as answer\",\n    \"Founded Year\": \"If the data is given then write the Founded Year or else give Not Available as answer\"\n  }\n}\n\nREQUIREMENTS  \n- Only output the JSON object.  \n- Do not add any explanations, markdown, or commentary.  \n- If data is missing, still produce a natural-sounding email without placeholders.  \n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1780,
        1480
      ],
      "id": "e7fd7943-e2ba-4791-93a1-80ee6ab301a9",
      "name": "AI Agent6"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1880,
        1680
      ],
      "id": "973bf2ca-d5a8-44d4-92a0-d375e5e5a21a",
      "name": "OpenAI Chat Model1",
      "credentials": {}
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Code node (v2)\n * Input:  $input.first().json.output  (string; may contain ```json fences)\n * Output: [{ json: { PersonalizedEmail: {\n *   subject, body, follow_up_notes, qualification, revenue, employee_count, founded_year\n * }}}]\n */\n\nfunction stripCodeFences(str) {\n  if (typeof str !== 'string') return str;\n  return str\n    .replace(/^```json\\s*/i, '')\n    .replace(/^```\\s*/i, '')\n    .replace(/```$/i, '')\n    .trim();\n}\n\nfunction extractJsonObject(raw) {\n  if (typeof raw !== 'string') throw new Error('Expected a string in \"output\".');\n  const deFenced = stripCodeFences(raw);\n\n  // Try direct parse\n  try { return JSON.parse(deFenced); } catch {}\n\n  // Fallback: first top-level {...}\n  const start = deFenced.indexOf('{');\n  const end   = deFenced.lastIndexOf('}');\n  if (start === -1 || end === -1 || end <= start) {\n    throw new Error('No JSON object found in \"output\".');\n  }\n  const candidate = deFenced.slice(start, end + 1);\n\n  try { return JSON.parse(candidate); }\n  catch (e) {\n    // Last resort for double-encoded\n    try { return JSON.parse(JSON.parse(`\"${candidate.replace(/\"/g, '\\\\\"')}\"`)); }\n    catch { throw new Error('Failed to parse JSON from \"output\". ' + e.message); }\n  }\n}\n\nfunction normalizeMissing(val) {\n  // Map missing/placeholder values → 'Not Found'\n  if (val === undefined || val === null) return 'Not Found';\n  if (Array.isArray(val)) val = val.find(v => String(v ?? '').trim()) ?? '';\n  let s = String(val).trim();\n  if (!s) return 'Not Found';\n  const placeholders = ['not available','n/a','na','none','null','undefined','-','unknown'];\n  if (placeholders.includes(s.toLowerCase())) return 'Not Found';\n  return s;\n}\n\nfunction normalizeResult(obj) {\n  if (!obj || typeof obj !== 'object') throw new Error('Parsed value is not an object.');\n  const root = obj.PersonalizedEmail || obj.personalizedEmail || obj.email || obj;\n\n  if (!root || typeof root !== 'object') {\n    throw new Error('Missing \"PersonalizedEmail\" object.');\n  }\n\n  const subject = normalizeMissing(root.subject);\n  const body = normalizeMissing(root.body);\n  const follow_up_notes = normalizeMissing(root.follow_up_notes ?? root.followUpNotes);\n\n  // Qualification (handles spaced key + fallbacks)\n  const qualification = normalizeMissing(\n    root['Qualified / Disqualified'] ?? root.qualification ?? root.Qualified ?? root.status\n  );\n\n  // Extra fields with varied key names\n  const revenue = normalizeMissing(\n    root.Revenue ?? root.revenue ?? root['Annual Revenue'] ?? root['ARR'] ?? root.arr\n  );\n\n  const employee_count = normalizeMissing(\n    root['Employee count'] ?? root.employees ?? root.Employees ?? root['Headcount'] ?? root.headcount\n  );\n\n  const founded_year = normalizeMissing(\n    root['Founded Year'] ?? root.founded ?? root['Founded'] ?? root['founding_year'] ?? root.foundingYear\n  );\n\n  // Basic sanity for subject/body types\n  if (subject === 'Not Found' || body === 'Not Found') {\n    // keep as Not Found; still return object\n  }\n\n  return { subject, body, follow_up_notes, qualification, revenue, employee_count, founded_year };\n}\n\n/** ---------- n8n Code node (v2) ---------- */\nconst rawOutput =\n  $input.first()?.json?.output ??\n  ($input.all()?.[0]?.json?.output ?? $input.all()?.[0]?.output);\n\nif (typeof rawOutput !== 'string' || !rawOutput.trim()) {\n  throw new Error('No \"output\" string found on first item.');\n}\n\nconst parsed = extractJsonObject(rawOutput);\nconst result = normalizeResult(parsed);\n\n// Return items array\nreturn [\n  {\n    json: {\n      PersonalizedEmail: result,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2140,
        1480
      ],
      "id": "8a42ebe3-baa1-4f01-b69b-e6b6aa340e71",
      "name": "Code5"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1Y1T_KMQ5_bl85-1jHW50Trtw7Rf_hMDo87VgvMZj2tw",
          "mode": "list",
          "cachedResultName": "Lead Gen for Real Estate",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/<Google Sheet ID here>/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 65921188,
          "mode": "list",
          "cachedResultName": "Main Sheet",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/<Google Sheet ID here>/edit#gid=65921188"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Full Name": "={{ (() => { \n  const e = String($('Code2').item.json.Email ?? '').trim();\n  return (e && e.includes('@')) ? e.split('@')[0] : 'Not Found';\n})() }}",
            "Email": "={{ (e => {\n  e = String($('Code2').item.json.Email ?? '').trim();\n  return e ? e : 'Not Found';\n})() }}",
            "Website": "={{ (w => {\n  w = String(w ?? '').trim();\n  return w ? w : 'Not Found';\n})($('Limit').item.json.Website) }}",
            "Phone number": "={{ $('Limit').item.json['Phone number'] }}",
            "Subject": "={{ $json.PersonalizedEmail.subject }}",
            "Body": "={{ $json.PersonalizedEmail.body }}",
            "Qualified / Disqualified": "=Qualified",
            "Follow Up Notes": "={{ $json.PersonalizedEmail.follow_up_notes }}",
            "Revenue": "={{ $json.PersonalizedEmail.revenue }}",
            "Employee Count": "={{ $json.PersonalizedEmail.employee_count }}",
            "Founded Year": "={{ $json.PersonalizedEmail.founded_year }}",
            "Summary": "={{ $('AI Agent5').item.json.output }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Full Name",
              "displayName": "Full Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Email",
              "displayName": "Email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Website",
              "displayName": "Website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone number",
              "displayName": "Phone number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Subject",
              "displayName": "Subject",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Body",
              "displayName": "Body",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Follow Up Notes",
              "displayName": "Follow Up Notes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Qualified / Disqualified",
              "displayName": "Qualified / Disqualified",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Revenue",
              "displayName": "Revenue",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Employee Count",
              "displayName": "Employee Count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Founded Year",
              "displayName": "Founded Year",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Summary",
              "displayName": "Summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2580,
        1660
      ],
      "id": "b0ff4fd2-708e-40ee-8a70-ff4327fc32b7",
      "name": "Append row in sheet1",
      "credentials": {}
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1Y1T_KMQ5_bl85-1jHW50Trtw7Rf_hMDo87VgvMZj2tw",
          "mode": "list",
          "cachedResultName": "Lead Gen for Real Estate",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/<Google Sheet ID here>/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 954930494,
          "mode": "list",
          "cachedResultName": "Raw Serp Data",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/<Google Sheet ID here>/edit#gid=954930494"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_number": "={{ $('Get row(s) in sheet').item.json.row_number }}",
            "Qualified /Disqualified": "=Qualified"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Website",
              "displayName": "Website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone number",
              "displayName": "Phone number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Rating",
              "displayName": "Rating",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Rating Count",
              "displayName": "Rating Count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "City",
              "displayName": "City",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Neighborhood",
              "displayName": "Neighborhood",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Qualified /Disqualified",
              "displayName": "Qualified /Disqualified",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Added to Main sheet",
              "displayName": "Added to Main sheet",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2780,
        1660
      ],
      "id": "303a44c8-0050-4230-9cdf-ff875f26792d",
      "name": "Update row in sheet2",
      "credentials": {}
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Code node (v2)\n * Input:  $input.first().json.output   (string, may contain ```json fences)\n * Output: [{ json: { Summary: string, Email: string } }]\n */\n\nfunction stripCodeFences(str) {\n  if (typeof str !== 'string') return str;\n  return str\n    .replace(/^```json\\s*/i, '')\n    .replace(/^```\\s*/i, '')\n    .replace(/```$/i, '')\n    .trim();\n}\n\nfunction extractJsonObject(raw) {\n  if (typeof raw !== 'string') throw new Error('Expected a string in \"output\".');\n  const deFenced = stripCodeFences(raw);\n\n  // Try direct parse first\n  try { return JSON.parse(deFenced); } catch {}\n\n  // Fallback: locate first top-level {...}\n  const start = deFenced.indexOf('{');\n  const end   = deFenced.lastIndexOf('}');\n  if (start === -1 || end === -1 || end <= start) {\n    throw new Error('No JSON object found in \"output\".');\n  }\n\n  const candidate = deFenced.slice(start, end + 1);\n\n  try { return JSON.parse(candidate); }\n  catch (e) {\n    // Last resort: try to handle double-encoded strings\n    try { return JSON.parse(JSON.parse(`\"${candidate.replace(/\"/g, '\\\\\"')}\"`)); }\n    catch { throw new Error('Failed to parse JSON from \"output\". ' + e.message); }\n  }\n}\n\nfunction validateEmail(email) {\n  if (typeof email !== 'string') return false;\n  const e = email.trim();\n  if (!e) return false;\n\n  // Basic sanity: local@domain.tld and avoid obvious placeholders\n  const badPrefixes = /^(noreply|no-reply|donotreply|do-not-reply|example|test)\\@/i;\n  if (badPrefixes.test(e)) return false;\n\n  const simple = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/i;\n  return simple.test(e);\n}\n\n// -------- Main --------\nconst rawOutput =\n  $input.first()?.json?.output ??\n  ($input.all()?.[0]?.json?.output ?? $input.all()?.[0]?.output);\n\nif (typeof rawOutput !== 'string' || !rawOutput.trim()) {\n  throw new Error('No \"output\" string found.');\n}\n\nconst obj = extractJsonObject(rawOutput);\n\n// Extract fields with safe defaults\nlet summary = (obj && typeof obj.Summary === 'string') ? obj.Summary.trim() : 'Not Found';\nlet email   = (obj && typeof obj.Email   === 'string') ? obj.Email.trim()   : 'Not Found';\n\n// Validate email; if invalid, set Not Found\nif (!validateEmail(email)) email = 'Not Found';\n\n// Return n8n items array\nreturn [\n  { json: { Summary: summary, Email: email } }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1580,
        1480
      ],
      "id": "31f9a489-c7ef-46fc-a146-db205ba0fbc2",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Code node (v2)\n * Input:  $input.first().json.output   (string, may contain ```json fences)\n * Output: [{ json: { Summary: string, Email: string } }]\n */\n\nfunction stripCodeFences(str) {\n  if (typeof str !== 'string') return str;\n  return str\n    .replace(/^```json\\s*/i, '')\n    .replace(/^```\\s*/i, '')\n    .replace(/```$/i, '')\n    .trim();\n}\n\nfunction extractJsonObject(raw) {\n  if (typeof raw !== 'string') throw new Error('Expected a string in \"output\".');\n  const deFenced = stripCodeFences(raw);\n\n  // Try direct parse first\n  try { return JSON.parse(deFenced); } catch {}\n\n  // Fallback: locate first top-level {...}\n  const start = deFenced.indexOf('{');\n  const end   = deFenced.lastIndexOf('}');\n  if (start === -1 || end === -1 || end <= start) {\n    throw new Error('No JSON object found in \"output\".');\n  }\n\n  const candidate = deFenced.slice(start, end + 1);\n\n  try { return JSON.parse(candidate); }\n  catch (e) {\n    // Last resort: try to handle double-encoded strings\n    try { return JSON.parse(JSON.parse(`\"${candidate.replace(/\"/g, '\\\\\"')}\"`)); }\n    catch { throw new Error('Failed to parse JSON from \"output\". ' + e.message); }\n  }\n}\n\nfunction validateEmail(email) {\n  if (typeof email !== 'string') return false;\n  const e = email.trim();\n  if (!e) return false;\n\n  // Basic sanity: local@domain.tld and avoid obvious placeholders\n  const badPrefixes = /^(noreply|no-reply|donotreply|do-not-reply|example|test)\\@/i;\n  if (badPrefixes.test(e)) return false;\n\n  const simple = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/i;\n  return simple.test(e);\n}\n\n// -------- Main --------\nconst rawOutput =\n  $input.first()?.json?.output ??\n  ($input.all()?.[0]?.json?.output ?? $input.all()?.[0]?.output);\n\nif (typeof rawOutput !== 'string' || !rawOutput.trim()) {\n  throw new Error('No \"output\" string found.');\n}\n\nconst obj = extractJsonObject(rawOutput);\n\n// Extract fields with safe defaults\nlet summary = (obj && typeof obj.Summary === 'string') ? obj.Summary.trim() : 'Not Found';\nlet email   = (obj && typeof obj.Email   === 'string') ? obj.Email.trim()   : 'Not Found';\n\n// Validate email; if invalid, set Not Found\nif (!validateEmail(email)) email = 'Not Found';\n\n// Return n8n items array\nreturn [\n  { json: { Summary: summary, Email: email } }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3400,
        980
      ],
      "id": "51db0f2d-4ba6-47d6-9983-678c34238c37",
      "name": "Code3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4616d412-6d74-419d-ba3e-4f2ab2b400ba",
              "leftValue": "={{ $('Code2').item.json.Email }}",
              "rightValue": "Not Found",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2380,
        1520
      ],
      "id": "64545d08-d010-4ae3-91a5-350513809f52",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1Y1T_KMQ5_bl85-1jHW50Trtw7Rf_hMDo87VgvMZj2tw",
          "mode": "list",
          "cachedResultName": "Lead Gen for Real Estate",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/<Google Sheet ID here>/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 65921188,
          "mode": "list",
          "cachedResultName": "Main Sheet",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/<Google Sheet ID here>/edit#gid=65921188"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Full Name": "={{ (() => { \n  const e = String($('Code2').item.json.Email ?? '').trim();\n  return (e && e.includes('@')) ? e.split('@')[0] : 'Not Found';\n})() }}",
            "Email": "={{ (e => {\n  e = String($('Code2').item.json.Email ?? '').trim();\n  return e ? e : 'Not Found';\n})() }}",
            "Website": "={{ (w => {\n  w = String(w ?? '').trim();\n  return w ? w : 'Not Found';\n})($('Limit').item.json.Website) }}",
            "Phone number": "={{ $('Limit').item.json['Phone number'] }}",
            "Subject": "={{ $json.PersonalizedEmail.subject }}",
            "Body": "={{ $json.PersonalizedEmail.body }}",
            "Qualified / Disqualified": "=Disqualified",
            "Follow Up Notes": "={{ $json.PersonalizedEmail.follow_up_notes }}",
            "Summary": "={{ $('AI Agent5').item.json.output }}",
            "Founded Year": "={{ $json.PersonalizedEmail.founded_year }}",
            "Employee Count": "={{ $json.PersonalizedEmail.employee_count }}",
            "Revenue": "={{ $json.PersonalizedEmail.revenue }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Full Name",
              "displayName": "Full Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Email",
              "displayName": "Email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Website",
              "displayName": "Website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone number",
              "displayName": "Phone number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Subject",
              "displayName": "Subject",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Body",
              "displayName": "Body",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Follow Up Notes",
              "displayName": "Follow Up Notes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Qualified / Disqualified",
              "displayName": "Qualified / Disqualified",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Revenue",
              "displayName": "Revenue",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Employee Count",
              "displayName": "Employee Count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Founded Year",
              "displayName": "Founded Year",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Summary",
              "displayName": "Summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2580,
        1440
      ],
      "id": "244cf765-10e1-4beb-8f28-c46c1f32b296",
      "name": "Append row in sheet2",
      "credentials": {}
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1Y1T_KMQ5_bl85-1jHW50Trtw7Rf_hMDo87VgvMZj2tw",
          "mode": "list",
          "cachedResultName": "Lead Gen for Real Estate",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/<Google Sheet ID here>/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 954930494,
          "mode": "list",
          "cachedResultName": "Raw Serp Data",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/<Google Sheet ID here>/edit#gid=954930494"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_number": "={{ $('Get row(s) in sheet').item.json.row_number }}",
            "Qualified /Disqualified": "=Disqualified"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Website",
              "displayName": "Website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone number",
              "displayName": "Phone number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Rating",
              "displayName": "Rating",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Rating Count",
              "displayName": "Rating Count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "City",
              "displayName": "City",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Neighborhood",
              "displayName": "Neighborhood",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Qualified /Disqualified",
              "displayName": "Qualified /Disqualified",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Added to Main sheet",
              "displayName": "Added to Main sheet",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2780,
        1440
      ],
      "id": "15fbc5c1-e2b2-416a-a5b0-819e1e7de529",
      "name": "Update row in sheet",
      "credentials": {}
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Google search via Brightdata Official node",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google search via Brightdata Official node": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Switch4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initiate batch extraction from URL1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Check the status of a batch extraction1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check the status of a batch extraction1": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Wait4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait4": {
      "main": [
        [
          {
            "node": "Download the snapshot content1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch4": {
      "main": [
        [
          {
            "node": "Initiate batch extraction from URL1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Apollo Organization Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download the snapshot content1": {
      "main": [
        [
          {
            "node": "Apollo Organization Details2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apollo Organization Details2": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Website Scraping via Brightdata Official Node",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Website Scraping via Brightdata Official Node": {
      "main": [
        [
          {
            "node": "Code12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code12": {
      "main": [
        [
          {
            "node": "AI Agent3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent3": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent4": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        [
          {
            "node": "Update row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apollo Organization Details": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Website Scraping via Brightdata Official Node1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Website Scraping via Brightdata Official Node1": {
      "main": [
        [
          {
            "node": "AI Agent5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent5": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent5",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent6": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent6",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet1": {
      "main": [
        [
          {
            "node": "Update row in sheet2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "AI Agent6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Append row in sheet2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet2": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "13a085ea-a640-4a38-bba0-e2e66cf34f21",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7d00adb66fd9b9e829cd2b9ea4e4833789b30d07b2af67253b71bc389fcab134"
  },
  "id": "L6PcjdoeIWaQDkqk",
  "tags": []
}